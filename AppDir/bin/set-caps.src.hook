#!/bin/sh

_check_caps() {
	if [ -z "$(getcap "$WORKAROUND_PATH"/bin/*)" ]; then
		if command -v pkexec 1>/dev/null; then
			SUDOCMD="pkexec"
		elif command -v lxqt-sudo 1>/dev/null; then
			SUDOCMD="lxqt-sudo"
		elif command -v sudo 1>/dev/null; then
			SUDOCMD="sudo"
		elif command -v doas 1>/dev/null; then
			SUDOCMD="doas"
		else
			>&2 echo "No 'pkexec', 'lxqt-sudo', 'sudo' or 'doas' found! Install one"
			>&2 echo "We are going to continue but things will likely break"
			return 0
		fi

		# make sure we are in a terminal when pkexec and lxqt-sudo are not found
		if [ "$SUDOCMD" != "pkexec" ] && [ "$SUDOCMD" != "lxqt-sudo" ]; then
			if [ -t 0 ]; then
				>&2 echo "'gsr-global-hotkeys' and 'gsr-kms-server' need capabilities for"
				>&2 echo "screen recording to work which needs elevated rights, because"
				>&2 echo "'pkexec' and 'lxqt-sudo' are NOT present will be using '$SUDOCMD'..."
			else
				notify -ne "Missing 'pkexec' and 'lxqt-sudo', run '${APPIMAGE##*/}' from the terminal"
				exit 1
			fi
		fi

		"$SUDOCMD" sh -c "
			setcap cap_setuid+ep '$WORKAROUND_PATH'/bin/gsr-global-hotkeys
			setcap cap_sys_admin+ep '$WORKAROUND_PATH'/bin/gsr-kms-server
		"
	fi
}

dependencies="setcap getcap ln mkdir grep"
for dep in $dependencies; do
	if ! command -v $dep 1>/dev/null; then
		notify -ne "Missing dependency '$dep'"
		exit 1
	fi
done

# gsr needs capabilities, so this ugly hack is needed for that
if ! grep -q '/tmp .*nosuid' /proc/mounts; then
	WORKAROUND_PATH="/tmp/.gsr-appimage-hack"
elif [ -w /var/tmp ] && ! grep -qE '/var/tmp .*nosuid|/var .*nosuid' /proc/mounts; then
	WORKAROUND_PATH="/var/tmp/.gsr-appimage-hack"
else
	WORKAROUND_PATH="${XDG_CACHE_HOME:-$HOME/.cache}"/gsr-appimage-hack
fi

# some distros don't include sbin in PATH
export PATH="$WORKAROUND_PATH/bin:$PATH:/usr/local/sbin:/usr/sbin:/sbin"

mkdir -p "$WORKAROUND_PATH"/bin

# hack to get capabities working
if [ ! -f "$WORKAROUND_PATH"/.done ]; then
	cp "$CURRENTDIR"/sharun*   "$WORKAROUND_PATH"
	cp "$CURRENTDIR"/.env      "$WORKAROUND_PATH" 2>/dev/null || :
	cp "$CURRENTDIR"/.preload  "$WORKAROUND_PATH" 2>/dev/null || :
	ln -f "$WORKAROUND_PATH"/sharun  "$WORKAROUND_PATH"/bin/gpu-screen-recorder
	ln -f "$WORKAROUND_PATH"/sharun  "$WORKAROUND_PATH"/bin/gpu-screen-recorder-gtk
	ln -f "$WORKAROUND_PATH"/sharun  "$WORKAROUND_PATH"/bin/gsr-dbus-server
	ln -f "$WORKAROUND_PATH"/sharun  "$WORKAROUND_PATH"/bin/gsr-notify
	ln -f "$WORKAROUND_PATH"/sharun  "$WORKAROUND_PATH"/bin/gsr-ui
	ln -f "$WORKAROUND_PATH"/sharun  "$WORKAROUND_PATH"/bin/gsr-cli
	ln -f "$WORKAROUND_PATH"/sharun2 "$WORKAROUND_PATH"/bin/gsr-global-hotkeys
	ln -f "$WORKAROUND_PATH"/sharun3 "$WORKAROUND_PATH"/bin/gsr-kms-server
	:> "$WORKAROUND_PATH"/.done
fi

ln -sfn "$CURRENTDIR"/etc     "$WORKAROUND_PATH"/etc
ln -sfn "$CURRENTDIR"/lib     "$WORKAROUND_PATH"/lib
ln -sfn "$CURRENTDIR"/share   "$WORKAROUND_PATH"/share
ln -sfn "$CURRENTDIR"/shared  "$WORKAROUND_PATH"/shared

_check_caps

# override CURRENTDIR now so that the AppRun launches the right binaries
CURRENTDIR="$WORKAROUND_PATH"
